{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/welcome/",
    "result": {"data":{"cur":{"id":"99958a62-3997-5fc8-8c35-e8b651d7143a","html":"<h1 id=\"드디어-리뉴얼\" style=\"position:relative;\"><a href=\"#%EB%93%9C%EB%94%94%EC%96%B4-%EB%A6%AC%EB%89%B4%EC%96%BC\" aria-label=\"드디어 리뉴얼 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎉드디어 리뉴얼!</h1>\n<h3 id=\"기존에-jekyll을-쓰고-있었다\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EC%A1%B4%EC%97%90-jekyll%EC%9D%84-%EC%93%B0%EA%B3%A0-%EC%9E%88%EC%97%88%EB%8B%A4\" aria-label=\"기존에 jekyll을 쓰고 있었다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기존에 jekyll을 쓰고 있었다.</h3>\n<p>사실 업로드를 잘 안했다.<br>\n오랜만에 포스팅 좀 하려는데 템플릿이 맘에 들지 않았다.<br>\n<del>그래서 포스팅 하려고 할때마다 리뉴얼함..;</del></p>\n<h3 id=\"gatsby로-변경했다\" style=\"position:relative;\"><a href=\"#gatsby%EB%A1%9C-%EB%B3%80%EA%B2%BD%ED%96%88%EB%8B%A4\" aria-label=\"gatsby로 변경했다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gatsby로 변경했다.</h3>\n<p>이번엔 오래갈 것 같다! 디자인이 너무 맘에 든다 😆<br>\n<a href=\"https://github.com/zoomkoding\">zoomkoding</a> 님 감사합니다!</p>","excerpt":"🎉드디어 리뉴얼! 기존에 jekyll을 쓰고 있었다. 사실 업로드를 잘 안했다. 오랜만에 포스팅 좀 하려는데 템플릿이 맘에 들지 않았다. 그래서 포스팅 하려고 할때마다 리뉴얼함..; Gatsby로 변경했다. 이번엔 오래갈 것 같다! 디자인이 너무 맘에 든다 😆 zoomkoding 님 감사합니다!","frontmatter":{"date":"April 26, 2022","title":"리뉴얼","categories":"블로그 featured","author":"도리니","emoji":"🎉"},"fields":{"slug":"/welcome/"}},"next":{"id":"4eb7b235-f79d-54d0-b8b1-9f0a2dda84a7","html":"<ol>\n<li>\n<p>Spring Framework란?</p>\n<ul>\n<li>Spring Framework란 Java 엔터프라이즈 개발을 편하게 해주는 오픈소스 경량급 애플리케이션 프레임워크입니다.\n<ul>\n<li>애플리케이션 프레임워크 : 특정 분야에 국한 되지 않고 전 영역을 포괄하는 범용적인 프레임워크를 말한다.</li>\n<li>경량급 프레임워크 : 단순한 웹컨테이너에서도 엔터프라이즈 개발의 고급기술을 대부분 사용할 수 있다.</li>\n<li>엔터프라이즈 개발 : 개발자가 복잡하고 실수하기 쉬운 low level에 많이 신경쓰지 않으면서, Business Logic 개발에 전념할 수 있도록 해줍니다.</li>\n</ul>\n</li>\n<li>Spring Framework의 특징\n<ul>\n<li>컨테이너 역할 : Spring 컨테이너는 Java 객체의 생명주기를 관리하며, Spring 컨테이너로부터 필요한 객체를 가져와서 사용할 수 있다.</li>\n<li>DI (의존성 주입) : Spring은 설정파일이나 어노테이션을 통해서 객체간의 의존관계를 설정할 수 있도록 한다.</li>\n<li>AOP 지원 : 트랜잭션이나 로깅, 보안과 같이 공통적으로 필요로하는 모듈들을 실제 핵심모듈에서 분리해서 적용할 수 있다.</li>\n<li>POJO 지원: Spring 컨테이너에 저장되는 Java 객체는 특정한 인터페이스를 구현하거나, 특정 클래스를 상속받지 않아도 된다.</li>\n<li>트랜잭션 처리를 위한 일관된 방법을 지원 : JDBC 등 어떤 트랜잭션을 사용하던 설정을 통해 정보를 관리하므로 트랜잭션 구현에 상관없이 동일한 코드 사용 가능 (선언적)</li>\n<li>영속성(Persistence)과 관련된 다양한 API지원 : Mybatis, Hibernate등 데이터베이스 처리를 위한 ORM 프레임워크들과 연동 지원</li>\n</ul>\n</li>\n<li>Spring Framework 기능 요소\n<ul>\n<li>Spring Core : Spring Framework의 기본 기능 제공. 이 모듈에 있는 Bean Factory는 Spring의 기본 컨테이너면서 스프링 DI의 기반이다.</li>\n<li>Context : Context모듈은 BeanFactory의 개념을 확장한 것으로 국제화 메시지, 애플리케이션 생명주기 이벤트, 유효성 검증등을 지원한다.</li>\n<li>DAO : DAO 패키지는 JDBC에 대한 추상화 계층으로 JDBC 코딩이나 예외처리하는 부분을 간편화 시켰으며, AOP 모듈을 이용해 트랜잭션 관리 서비스도 제공한다.</li>\n<li>ORM : 널리 사용되는 ORM 프레임워크와의 연결고리를 제공한다. ORM제품들을 Spring의 기능과 조합해서 사용할 수 있도록 해준다.</li>\n<li>AOP : AOP모듈을 통해 Aspect 지향 프로그래밍을 지원한다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>AOP란 무엇인가요?</p>\n<p>관점지향 프로그래밍이라는 뜻으로, 핵심적인 기능에서 부가적인 기능을 분리하는 것입니다. 분리한 부가기능을 애스팩트라는 모듈형태로 만들어서 설계하고 개발하는 방법입니다.</p>\n<p>핵심기능에서 부가기능을 분리함으로 써, 핵심기능을 구현할 때 객체지향적인 가치를 지킬 수 있도록 도와주는 개념입니다.</p>\n<ul>\n<li>\n<p>그럼 애스팩트란 무엇인가요?</p>\n<p>부가기능(=공통기능)을 정의한 코드인 어드바이스와 어드바이스를 어디에 적용할 지 결정하는 포인트컷을 합친 개념이다.</p>\n<p>Target을 호출하는 이벤트 발생 시, Advice type에 따라 시기에 맞추어 Runtime을 가로채서 Advice가 실행되도록 한다.</p>\n</li>\n<li>\n<p>AOP 용어</p>\n<ul>\n<li>타겟 (Target)  : 핵심기능을 담고 있는 모듈로, 타겟은 부가기능을 부여할 대상이된다.</li>\n<li>어드바이스(advice) : 어드바이스는 타겟에 제공할 부가기능을 담고 있는 모듈이다.</li>\n<li>조인포인트(join point) : 어드바이스가 적용될 수 있는 위치를 말한다. 타겟이 구현한 인터페이스의 모든 메소드는 조인포인트가 된다.</li>\n<li>포인트컷 (Point Cut): 어드바이스를 적용할 타겟의 메서드를 선별하는 정규표현식이다.</li>\n<li>애스팩트 (Aspact) : AOP의 기본 모듈이다. (어드바이스+포인트컷), 싱글톤 형태</li>\n<li>어드바이저 (Advisor) :  어드바이저 = 애스팩트, 스프링AOP에서만 사용되는 용어</li>\n<li>위빙(Weaving) : 포인트컷에 의해서 결정된 타겟의 조인포인트에 부가기능을 삽입하는 과정, 핵심기능(타겟)에 영향을 주지 않으면서 필요한 부가기능을 추가할 수 있도록 해주는 핵심적인 처리과정이다.</li>\n</ul>\n</li>\n<li>\n<p>AOP 특징</p>\n<ol>\n<li>Spring은 프록시 기반 AOP를 지원한다.\n<ul>\n<li>Spring은 타겟 객체에 대한 프록시를 만들어 제공한다.</li>\n<li>타겟을 감싸는 프록시는 실행시간(Runtime)에 생성된다.</li>\n<li>프록시는 어드바이스를 타겟 객체에 적용하면서 생성되는 객체이다.</li>\n</ul>\n</li>\n<li>프록시가 호출을 가로챈다. (Intercept)\n<ul>\n<li>프록시는 타겟 객체에 대한 호출을 가로챈 다음 어드바이스 타입(before, after, after throwing, after returning, after around)에 맞게 부가기능 로직 수행 후 핵심기능 로직을 호출한다.</li>\n</ul>\n</li>\n<li>Spring AOP는 메서드 조인포인트만 지원한다.\n<ul>\n<li>Spring은 동적 프록시를 기반으로 AOP를 구현하므로 메서드 조인 포인트만 지원한다. (런타임 시점에만 지원한다) 그런데 AspectJ와 같은 고급 AOP프레임워크를 사용하면 다양한 작업에 부가기능을 사용할 수 있다. (객체의 생성, 필드값의 조회와 조작 등)</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>구현방식</p>\n<ul>\n<li>\n<p>XML 기반의 POJO 클래스를 이용한 AOP 구현</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  Advice 클래스 작성 후, xml설정파일에 &lt;aop:config> 로 애스펙트 설정</code></pre></div>\n</li>\n<li>\n<p>@Aspect 어노테이션을 이용한 AOP 구현</p>\n<ul>\n<li>Advice 종류\n<ul>\n<li>Around : Join point 앞 뒤로 실행</li>\n<li>Before : Join point 이전 시점 , After : Join point 이후 시점</li>\n<li>After Returning : Join point 메서드 호출이 정상적으로 종료된 뒤에 실행되는 Advice</li>\n<li>After Throwing : Join point호출 후 Exception이 발생할 때 실행되는 Advice</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Join point 인터페이스 (Advice 클래스)</p>\n<ul>\n<li>Around 어드바이스는 join point의 하위 클래스인 ProceedingJoinPoint 타입의 파라미터를 필수적으로 선언해야한다.</li>\n</ul>\n</li>\n<li>\n<p>Point cut 표현식 문법 대표적인 사용은 excecution()이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">excecution</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>접근제한자 <span class=\"token function\">패턴</span><span class=\"token punctuation\">(</span>생략가능<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> 리턴타입패턴 <span class=\"token punctuation\">[</span>타입패턴<span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span> \r\n<span class=\"token function\">이름패턴</span> <span class=\"token punctuation\">(</span>타입패턴<span class=\"token operator\">|</span> <span class=\"token string\">\"..\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span>throws 예외패턴<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n\r\n예시<span class=\"token punctuation\">)</span>\r\n<span class=\"token function\">excecution</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> myspring<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>UserServiceImpl<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n</code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>스프링 트랜잭션</p>\n<ul>\n<li>선언적 트랜잭션 :  어노테이션(Xml로 설정)  AOP를 이용한 선언적 방식</li>\n</ul>\n</li>\n<li>\n<p>MVC 패턴</p>\n<ul>\n<li>MVC는 Business logic과 presentation logic을 분리하여 적용하는 패턴이다.</li>\n<li>모델 : 비즈니스 로직 및 데이터 처리 담당 (DAO, Service)</li>\n<li>뷰 : 모델이 처리한 데이터나 작업결과를 출력하는 화면(Html, jsp)</li>\n<li>컨트롤러 : 클라이언트 요청을 받았으때 그 요청에 대해 실제 업무를 수행하는 모델 컴포넌트를 호출함 (Servlet , JSP)</li>\n</ul>\n</li>\n<li>\n<p>모델1 : Controller 역할을 JSP가 담당함</p>\n</li>\n<li>\n<p>모델2 : Controller 역할을 Servlet에서 담당함</p>\n</li>\n<li>\n<p>Front Controller 패턴 : 클라이언트가 보낸 요청을 받아서 공통적인 작업을 먼저 수행 (인증 or 권한체크) - Dispatcher Servlet</p>\n</li>\n<li>\n<p>흐름 : Dispatcher Servlet → Handler Mapping → Controller → ModelAndView → View Resolver → View</p>\n</li>\n</ul>\n</li>\n</ol>","frontmatter":{"date":"April 26, 2021","title":"Spring Framework 정리","categories":"알쓸개잡 featured","author":"도리니","emoji":"👀"},"fields":{"slug":"/springframework-note/"}},"prev":{"id":"c742d2d9-c796-5f02-819d-8deacb606e03","html":"<p><del><a href=\"https://git-scm.com/book/ko/v2\">https://git-scm.com/book/ko/v2</a> 보고 내 멋대로 정리한 내용</del></p>\n<h1 id=\"버전관리\" style=\"position:relative;\"><a href=\"#%EB%B2%84%EC%A0%84%EA%B4%80%EB%A6%AC\" aria-label=\"버전관리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>버전관리</h1>\n<h2 id=\"로컬버전관리\" style=\"position:relative;\"><a href=\"#%EB%A1%9C%EC%BB%AC%EB%B2%84%EC%A0%84%EA%B4%80%EB%A6%AC\" aria-label=\"로컬버전관리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>로컬버전관리</h2>\n<ul>\n<li>냉무</li>\n</ul>\n<h2 id=\"중앙버전관리cvcs\" style=\"position:relative;\"><a href=\"#%EC%A4%91%EC%95%99%EB%B2%84%EC%A0%84%EA%B4%80%EB%A6%ACcvcs\" aria-label=\"중앙버전관리cvcs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>중앙버전관리(CVCS)</h2>\n<ul>\n<li>svn\n<ul>\n<li>장점 : 모두 누가 무엇을 하고 있는지 알 수 있다. 관리자는 누가 무엇을 할지 꼼꼼하게 관리할 수 있다. 모든 클라이언트의 로컬 데이터베이스를 관리하는 것보다 VCS 하나를 관리하기가 훨씬 쉽다.</li>\n<li>단점 : 중앙 서버에 문제가 발생, 만약 서버가 한 시간 동안 다운되면 그동안 아무도 다른 사람과 협업할 수 없고 사람들이 하는 일을 백업할 방법도 없다. 그리고 중앙 데이터베이스가 있는 하드디스크에 문제가 생기면 프로젝트의 모든 히스토리를 잃는다. 물론 사람마다 하나씩 가진 스냅샷은 괜찮다. 로컬 VCS 시스템도 이와 비슷한 결점이 있고 이런 문제가 발생하면 모든 것을 잃는다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"분산버전관리dvcs\" style=\"position:relative;\"><a href=\"#%EB%B6%84%EC%82%B0%EB%B2%84%EC%A0%84%EA%B4%80%EB%A6%ACdvcs\" aria-label=\"분산버전관리dvcs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>분산버전관리(DVCS)</h2>\n<ul>\n<li>Git, Mecurial, Bazaar, Darcs</li>\n<li>단순히 파일의 마지막 스냅샷을 Checkout 하지 않는다. 그냥 저장소를 히스토리와 더불어 전부 복제한다.</li>\n<li>서버에 문제가 생기면 이 복제물로 다시 작업을 시작할 수 있다.</li>\n<li>클라이언트 중에서 아무거나 골라도 서버를 복원할 수 있다. Clone은 모든 데이터를 가진 진정한 백업이다.</li>\n<li>게다가 대부분의 DVCS 환경에서는 리모트 저장소가 존재한다. 리모트 저장소가 많을 수도 있다. 그래서 사람들은 동시에 다양한 그룹과 다양한 방법으로 협업할 수 있다.</li>\n<li>계층 모델 같은 중앙집중식 시스템으로는 할 수 없는 워크플로를 다양하게 사용할 수 있다.</li>\n</ul>\n<h1 id=\"git의-특징\" style=\"position:relative;\"><a href=\"#git%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"git의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Git의 특징</h1>\n<h3 id=\"차이가-아니라-스냅샷\" style=\"position:relative;\"><a href=\"#%EC%B0%A8%EC%9D%B4%EA%B0%80-%EC%95%84%EB%8B%88%EB%9D%BC-%EC%8A%A4%EB%83%85%EC%83%B7\" aria-label=\"차이가 아니라 스냅샷 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>차이가 아니라 스냅샷</h3>\n<p>　Subversion과 Subversion 비슷한 놈들과 Git의 가장 큰 차이점은 데이터를 다루는 방법에 있다.<br>\n큰 틀에서 봤을 때 VCS 시스템 대부분은 관리하는 정보가 파일들의 목록이다.\r\nCVS, Subversion, Perforce, Bazaar 등의 시스템은 각 파일의 변화를 시간순으로 관리하면서 파일들의 집합을 관리한다(보통 델타 기반 버전관리 시스템이라 함).\r\ngit은 이런 식으로 데이터를 저장하지도 취급하지도 않는다. 대신 Git은 데이터를 파일 시스템 스냅샷의 연속으로 취급하고 크기가 아주 작다.\r\nGit은 커밋하거나 프로젝트의 상태를 저장할 때마다 파일이 존재하는 그 순간을 중요하게 여긴다.\r\n파일이 달라지지 않았으면 Git은 성능을 위해서 파일을 새로 저장하지 않는다.\r\n단지 이전 상태의 파일에 대한 링크만 저장한다. Git은 데이터를 스냅샷의 스트림처럼 취급한다.</p>\n<p><span class=\"evidence\">Git은 데이터를 Change Set이나 변경사항(Diff)으로 기록하지 않고 일련의 스냅샷으로 기록</span></p>\n<h3 id=\"거의-모든-명령을-로컬에서-실행\" style=\"position:relative;\"><a href=\"#%EA%B1%B0%EC%9D%98-%EB%AA%A8%EB%93%A0-%EB%AA%85%EB%A0%B9%EC%9D%84-%EB%A1%9C%EC%BB%AC%EC%97%90%EC%84%9C-%EC%8B%A4%ED%96%89\" aria-label=\"거의 모든 명령을 로컬에서 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>거의 모든 명령을 로컬에서 실행</h3>\n<ul>\n<li>거의 모든 명령이 로컬 파일과 데이터만 사용하기 때문에 네트워크에 있는 다른 컴퓨터는 필요 없다.</li>\n<li>프로젝트의 모든 히스토리가 로컬 디스크에 있기 때문에 모든 명령이 순식간에 실행된다.</li>\n<li>파일을 비교하기 위해 리모트에 있는 서버에 접근하고 나서 예전 버전을 가져올 필요가 없다.</li>\n</ul>\n<h3 id=\"git의-무결성\" style=\"position:relative;\"><a href=\"#git%EC%9D%98-%EB%AC%B4%EA%B2%B0%EC%84%B1\" aria-label=\"git의 무결성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Git의 무결성</h3>\n<p>Git은 데이터를 저장하기 전에 항상 체크섬을 구하고 그 체크섬으로 데이터를 관리한다</p>\n<h3 id=\"git은-데이터를-추가할-뿐\" style=\"position:relative;\"><a href=\"#git%EC%9D%80-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%B6%94%EA%B0%80%ED%95%A0-%EB%BF%90\" aria-label=\"git은 데이터를 추가할 뿐 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Git은 데이터를 추가할 뿐</h3>\n<p>Git으로 무얼 하든 Git 데이터베이스에 데이터가 추가 된다. 되돌리거나 데이터를 삭제할 방법이 없다.</p>\n<h3 id=\"세가지-상태\" style=\"position:relative;\"><a href=\"#%EC%84%B8%EA%B0%80%EC%A7%80-%EC%83%81%ED%83%9C\" aria-label=\"세가지 상태 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세가지 상태</h3>\n<p>Git은 파일을 Committed, Modified, Staged 이렇게 세 가지 상태로 관리한다.</p>\n<ul>\n<li>Committed란 데이터가 로컬 데이터베이스에 안전하게 저장됐다는 것을 의미한다.</li>\n<li>Modified는 수정한 파일을 아직 로컬 데이터베이스에 커밋하지 않은 것을 말한다.</li>\n<li>Staged란 현재 수정한 파일을 곧 커밋할 것이라고 표시한 상태를 의미한다.</li>\n</ul>\n<h3 id=\"세가지-단계\" style=\"position:relative;\"><a href=\"#%EC%84%B8%EA%B0%80%EC%A7%80-%EB%8B%A8%EA%B3%84\" aria-label=\"세가지 단계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세가지 단계</h3>\n<p>![세가지 단계](./three phase.png)</p>\n<ul>\n<li>Git 디렉토리는 Git이 프로젝트의 메타데이터와 객체 데이터베이스를 저장하는 곳을 말한다.</li>\n<li>워킹 트리는 프로젝트의 특정 버전을 Checkout 한 것이다.</li>\n<li>Staging Area는 Git 디렉토리에 있다. 단순한 파일이고 곧 커밋할 파일에 대한 정보를 저장한다. (index 라고도 함)</li>\n</ul>\n<h3 id=\"하는-일\" style=\"position:relative;\"><a href=\"#%ED%95%98%EB%8A%94-%EC%9D%BC\" aria-label=\"하는 일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>하는 일</h3>\n<ol>\n<li>\n<p>워킹 트리에서 파일을 수정한다.</p>\n</li>\n<li>\n<p>Staging Area에 파일을 Stage 해서 커밋할 스냅샷을 만든다. 모든 파일을 추가할 수도 있고 선택하여 추가할 수도 있다.</p>\n</li>\n<li>\n<p>Staging Area에 있는 파일들을 커밋해서 Git 디렉토리에 영구적인 스냅샷으로 저장한다.</p>\n<ul>\n<li>수정 => modified</li>\n<li>git add => staged</li>\n<li>git commit => committed</li>\n</ul>\n</li>\n</ol>","frontmatter":{"date":"April 29, 2022","title":"(작성중) Git 정리","categories":"알쓸개잡 featured","author":"도리니","emoji":"👀"},"fields":{"slug":"/git-note/"}},"site":{"siteMetadata":{"siteUrl":"https://baesomi.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/welcome/","nextSlug":"/springframework-note/","prevSlug":"/git-note/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}